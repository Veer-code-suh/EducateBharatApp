import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { COLOR } from '../../Constants';
import Fontisto from 'react-native-vector-icons/Fontisto';
import { TouchableOpacity } from 'react-native-gesture-handler';
import { BACKEND_URL } from "@env";
import AsyncStorage from '@react-native-async-storage/async-storage'
import { useToast } from 'react-native-toast-notifications'

const QuestionPage = ({ navigation, route }) => {
    const toast = useToast()
    const { quiz , quizType, initial } = route.params;

    const [currentQuestion, setCurrentQuestion] = React.useState(0);
    const [questions, setQuestions] = React.useState([

    ]);

    const getquizbyid = async () => {
        let token = await AsyncStorage.getItem("token")
        fetch(BACKEND_URL + "/getQuizData", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            },
            body: JSON.stringify({
                quizId: quiz._id,
                quizType: quizType
            }),
        })
            .then(res => res.json())
            .then(data => {
                if (data.error) {
                    toast.show(data.error, {
                        type: "danger",
                    });
                }
                else {
                    console.log('quizfull data ' , data)
                 }
            })
    }

    React.useEffect(() => {
        // console.log(quiz);
        // setQuestions(quiz.data);
        setCurrentQuestion(0);
        getquizbyid(); 
    }, [quiz]);


    const submittest = () => {
        let score = 0;
        questions.map((qna, index) => {
            if (qna.userAnswer == qna.answer) {
                score++;
            }
        });
        // alert("Your score is " + score + "/" + questions.length);
        navigation.navigate("submitquiz", { score: score, total: questions.length });
    }



    return (
        <View style={styles.fullpage}>

            {
                questions.filter((qna, index) => index == currentQuestion).map((qna, index) => {
                    return (
                        <View key={index} style={styles.questionanswer}>
                            <Text>{currentQuestion + 1} / {questions.length}</Text>
                            <Text style={styles.question}>{qna.question}</Text>
                            {
                                qna.options.map((item, index) => {
                                    return (
                                        <TouchableOpacity key={index} style={styles.option}
                                            onPress={() => {

                                                // console.log(qna.userAnswer, qna.answer);
                                                // setCurrentQuestion(currentQuestion + 1);

                                                // if (qna.userAnswer == qna.answer) {
                                                //     console.log("correct");
                                                // } else {
                                                //     console.log("wrong");
                                                // }

                                                if (qna.userAnswer == null) {
                                                    let temp = [...questions];
                                                    temp[currentQuestion].userAnswer = index;
                                                    setQuestions(temp);
                                                }
                                                else {
                                                    alert("You have already answered this question");
                                                }
                                            }}
                                        >


                                            {qna.userAnswer === qna.answer && index == qna.userAnswer ? (
                                                <View style={styles.correctanswer}>
                                                    <Text style={styles.answertxt}>{item}</Text>
                                                </View>
                                            ) : qna.userAnswer !== qna.answer && qna.userAnswer !== null && index == qna.userAnswer ? (
                                                <View style={styles.wronganswer}>
                                                    <Text style={styles.answertxt}>{item}</Text>
                                                </View>
                                            ) : (
                                                <View style={styles.unselectedanswer}>
                                                    <Text style={styles.answertxt}>{item}</Text>
                                                </View>
                                            )}

                                            {/* {
                                                qna.userAnswer == qna.answer &&
                                                <View style={styles.correctanswer}>
                                                    <Text style={styles.answertxt}>{item}</Text>
                                                </View>
                                            }

                                            {
                                                qna.userAnswer != qna.answer && qna.userAnswer != null &&
                                                <View style={styles.wronganswer}>
                                                    <Text style={styles.answertxt}>{item}</Text>
                                                </View>

                                            }

                                            {
                                                qna.userAnswer == null || qna.userAnswer != qna.answer &&
                                                <View style={styles.unselectedanswer}>
                                                    <Text style={styles.answertxt}>{item}</Text>
                                                </View>
                                            } 
                                            
                                            
                                            */}

                                        </TouchableOpacity>
                                    )
                                })
                            }
                        </View>
                    )
                })
            }
            <View style={styles.prevnext}>
                {currentQuestion > 0 && <Text onPress={() => setCurrentQuestion(currentQuestion - 1)} style={styles.btn}>Previous</Text>}
                {currentQuestion < questions.length - 1 && <Text onPress={() => setCurrentQuestion(currentQuestion + 1)} style={styles.btn}>Next</Text>}
                {currentQuestion == questions.length - 1 && <Text style={styles.btn}
                    onPress={() => {
                        submittest();
                    }}
                >Submit</Text>}

            </View>
        </View>
    )
}

export default QuestionPage

const styles = StyleSheet.create({
    fullpage: {
        backgroundColor: COLOR.col4,
        flex: 1,
    },
    prevnext: {
        flexDirection: "row",
        justifyContent: "space-around",
        position: "absolute",
        bottom: 0,
        left: 0,
        width: "100%",
        padding: 10,
    },
    btn: {
        backgroundColor: COLOR.col3,
        padding: 10,
        width: "40%",
        textAlign: "center",
        borderRadius: 5,
        color: COLOR.col1,
        fontWeight: "bold",
        fontSize: 16,
    },
    questionanswer: {
        margin: 10,
    },
    question: {
        fontSize: 18,
        backgroundColor: COLOR.col3,
        padding: 10,
        paddingHorizontal: 20,
        color: COLOR.col1,
        borderRadius: 25,
        marginVertical: 10,
    },
    answertxt: {
        color: '#545454',
    },
    unselectedanswer: {
        flexDirection: "row",
        justifyContent: "space-between",
        alignItems: "center",
        marginVertical: 10,
        paddingHorizontal: 20,
        backgroundColor: COLOR.col1,
        padding: 10,
        borderRadius: 25,
    },
    correctanswer: {
        flexDirection: "row",
        justifyContent: "space-between",
        alignItems: "center",
        marginVertical: 10,
        paddingHorizontal: 20,
        backgroundColor: '#99B83C',
        padding: 10,
        borderRadius: 25,
    },
    wronganswer: {
        flexDirection: "row",
        justifyContent: "space-between",
        alignItems: "center",
        marginVertical: 10,
        paddingHorizontal: 20,
        backgroundColor: '#E74C3C',
        padding: 10,
        borderRadius: 25,

    }
})